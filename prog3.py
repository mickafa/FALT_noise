import math
Mm = 7.3477e22 # масса Луны
Rm = 1737100.0 # радиус Луны
G  = 6.6743015e-11 # гравитационная постоянная
v1 = math.sqrt ( G*Mm/(4*Rm) ) # начальная скорость
DT = 0.01 # шаг по времени

def flight ( dv ): # летим половину эллипса
    vx = 0.0 # начальные условия
    vy = v1 - dv
    x = 4*Rm
    y = 0.0001 # 0.1 мм, чтобы зайти в цикл
    t = 0.0 # таймер = 0
    
    while ( y >= 0 ): #считаем верхнюю половину эллипса
        phi = math.atan2 ( y, x ) # полярные координаты
        
        a = G*Mm/(x*x + y*y) # ускорение и проекции
        ax = a*math.cos ( phi )
        ay = a*math.sin ( phi )
        
        vx -= ax*DT # пересчитываем скорости
        vy -= ay*DT
        
        x += vx*DT # пересчитываем координаты
        y += vy*DT
        
        t += DT # обновление таймера
    
    return (-x-Rm), t, -vy

h = 3*Rm 
dv = 1.0
while ( h >= 0.1 ): # метод секущих
    h, t, v2 = flight ( dv )
    dv = (3*Rm * dv)/(3*Rm - h)
    print ( "пробуем dv = ", dv, "\tполучаем h = ", h )
print ( "ответ: v1, dv, h, t, v2 = \n", v1, dv, flight ( dv ) )

# посчитаем по аналитическим формулам
print ( "\nпосчитаем по аналитическим формулам" )

dv = v1 - math.sqrt ( G*Mm * ( 2./(4.*Rm) - 1./(2.5*Rm ) ) )
v2 = math.sqrt ( G*Mm * ( 2./Rm - 1./(2.5*Rm) ) )
t = math.pi*math.sqrt ( (2.5*Rm)**3 / (G*Mm))

print ( "v1, dv, v2 = ", v1, dv, v2 )
print ( "полупериод конечной орбиты = ", t )